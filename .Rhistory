library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
#...
# specify predictor matrix and imputationMethod
predM1 <- predM
predM1["RUB","StudyID"] <- -2
predM1["systolic_median","StudyID"] <- -2
predM1["diastolic_median","StudyID"] <- -2
predM1["BMI_median","StudyID"] <- -2
predM1["A1C_median","StudyID"] <- -2
predM1["CHF","StudyID"] <- -2
predM1["Depression","StudyID"] <- -2
predM1["Hypertension","StudyID"] <- -2
predM1["Asthma","StudyID"] <- -2
impM1 <- impM
impM1["RUB"] <- "2l.pan"
impM1["systolic_median"] <- "2l.pan"
impM1["diastolic_median"] <- "2l.pan"
impM1["BMI_median"] <- "2l.pan"
impM1["A1C_median"] <- "2l.pan"
impM1["CHF"] <- "2l.pan"
impM1["Depression"] <- "2l.pan"
impM1["Hypertension"] <- "2l.pan"
impM1["Asthma"] <- "2l.pan"
# multilevel imputation
imp1 <- mice( as.matrix( pre_imp ) , m = 50 , predictorMatrix = predM1 ,
imputationMethod = impM1 , maxit=50 )
? complete
imps <- complete(imp1, action="long", include=TRUE)
dim(imps)
jklfsd
names(imps)
table(imps$.imp)
? write.csv
write.csv(imps, file="C:/Users/johnex3/Desktop/Temporary storage/lincc/post_imp.csv")
? mice
imps <- complete(imp1, action="long", include=FALSE)
write.csv(imps, file="C:/Users/johnex3/Desktop/Temporary storage/lincc/post_imp.csv")
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
predM
predM
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
predM
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
#...
# specify predictor matrix and imputationMethod
predM1 <- predM
predM1["RUB","StudyID"] <- -2
predM1["systolic_median","StudyID"] <- -2
predM1["diastolic_median","StudyID"] <- -2
predM1["BMI_median","StudyID"] <- -2
predM1["A1C_median","StudyID"] <- -2
predM1["PHQ_max","StudyID"] <- -2
predM1["CHF","StudyID"] <- -2
predM1["Depression","StudyID"] <- -2
predM1["Hypertension","StudyID"] <- -2
predM1["Asthma","StudyID"] <- -2
impM1 <- impM
impM1["RUB"] <- "2l.pan"
impM1["systolic_median"] <- "2l.pan"
impM1["diastolic_median"] <- "2l.pan"
impM1["BMI_median"] <- "2l.pan"
impM1["A1C_median"] <- "2l.pan"
impM1["PHQ_max"] <- "2l.pan"
impM1["CHF"] <- "2l.pan"
impM1["Depression"] <- "2l.pan"
impM1["Hypertension"] <- "2l.pan"
impM1["Asthma"] <- "2l.pan"
# multilevel imputation
imp1 <- mice( as.matrix( pre_imp ) , m = 50 , predictorMatrix = predM1 ,
imputationMethod = impM1 , maxit=50 )
fds
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
names(pre_imp)
4^2
a <- seq(3)
a^2
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
pre_imp$mcxt <- pre_imp$monthcount * pre_imp$Tacoma
pre_imp$mcxp <- pre_imp$monthcount * pre_imp$Puyallup
pre_imp$mcxr <- pre_imp$monthcount * pre_imp$Rainier
pre_imp$mcxts <- pre_imp$monthcount * pre_imp$TacomaSouth
pre_imp$mcxt2 <- pre_imp$mcxt^2
pre_imp$mcxp2 <- pre_imp$mcxp^2
pre_imp$mcxr2 <- pre_imp$mcxr^2
pre_imp$mcxts2 <- pre_imp$mcxts^2
pre_imp$mcxt3 <- pre_imp$mcxt^3
pre_imp$mcxp3 <- pre_imp$mcxp^3
pre_imp$mcxr3 <- pre_imp$mcxr^3
pre_imp$mcxts3 <- pre_imp$mcxts^3
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
#...
# specify predictor matrix and imputationMethod
predM1 <- predM
predM1["RUB","StudyID"] <- -2
predM1["systolic_median","StudyID"] <- -2
predM1["diastolic_median","StudyID"] <- -2
predM1["BMI_median","StudyID"] <- -2
predM1["A1C_median","StudyID"] <- -2
predM1["PHQ_max","StudyID"] <- -2
predM1["CHF","StudyID"] <- -2
predM1["Depression","StudyID"] <- -2
predM1["Hypertension","StudyID"] <- -2
predM1["Asthma","StudyID"] <- -2
impM1 <- impM
impM1["RUB"] <- "2l.pan"
impM1["systolic_median"] <- "2l.pan"
impM1["diastolic_median"] <- "2l.pan"
impM1["BMI_median"] <- "2l.pan"
impM1["A1C_median"] <- "2l.pan"
impM1["PHQ_max"] <- "2l.pan"
impM1["CHF"] <- "2l.pan"
impM1["Depression"] <- "2l.pan"
impM1["Hypertension"] <- "2l.pan"
impM1["Asthma"] <- "2l.pan"
# multilevel imputation
imp1 <- mice( as.matrix( pre_imp ) , m = 50 , predictorMatrix = predM1 ,
imputationMethod = impM1 , maxit=50 )
imps <- complete(imp1, action="long", include=FALSE)
write.csv(imps, file="C:/Users/johnex3/Desktop/Temporary storage/lincc/post_imp.csv")
pv <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/mhrn/prvar.csv"", header=TRUE)
""
pv <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/mhrn/prvar.csv", header=TRUE)
names(pv)
dim(pv)
pv[1:20,]
library(car)
? recode
? load
load("G:/CTRHS/Opioid_PMR_3B/PROGRAMMING/3B Algorithm Development/SAS Datasets/Potential Predictors/fda_3b_round_1_predictors.rdata")
ls()
names(fds_3b_round_1_predictors)
names(fda_3b_round_1_predictors)
View(fda_3b_round_1_predictors)
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
pre_imp$mcxt <- pre_imp$monthcount * pre_imp$Tacoma
pre_imp$mcxp <- pre_imp$monthcount * pre_imp$Puyallup
pre_imp$mcxr <- pre_imp$monthcount * pre_imp$Rainier
pre_imp$mcxts <- pre_imp$monthcount * pre_imp$TacomaSouth
pre_imp$mcxt2 <- pre_imp$mcxt^2
pre_imp$mcxp2 <- pre_imp$mcxp^2
pre_imp$mcxr2 <- pre_imp$mcxr^2
pre_imp$mcxts2 <- pre_imp$mcxts^2
pre_imp$mcxt3 <- pre_imp$mcxt^3
pre_imp$mcxp3 <- pre_imp$mcxp^3
pre_imp$mcxr3 <- pre_imp$mcxr^3
pre_imp$mcxts3 <- pre_imp$mcxts^3
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
#...
# specify predictor matrix and imputationMethod
predM1 <- predM
predM1["RUB","StudyID"] <- -2
predM1["systolic_median","StudyID"] <- -2
predM1["diastolic_median","StudyID"] <- -2
predM1["BMI_median","StudyID"] <- -2
predM1["A1C_median","StudyID"] <- -2
predM1["PHQ_max","StudyID"] <- -2
predM1["CHF","StudyID"] <- -2
predM1["Depression","StudyID"] <- -2
predM1["Hypertension","StudyID"] <- -2
predM1["Asthma","StudyID"] <- -2
impM1 <- impM
impM1["RUB"] <- "2l.pan"
impM1["systolic_median"] <- "2l.pan"
impM1["diastolic_median"] <- "2l.pan"
impM1["BMI_median"] <- "2l.pan"
impM1["A1C_median"] <- "2l.pan"
impM1["PHQ_max"] <- "2l.pan"
impM1["CHF"] <- "2l.pan"
impM1["Depression"] <- "2l.pan"
impM1["Hypertension"] <- "2l.pan"
impM1["Asthma"] <- "2l.pan"
# multilevel imputation
imp1 <- mice( as.matrix( pre_imp ) , m = 50 , predictorMatrix = predM1 ,
imputationMethod = impM1 , maxit=50 )
imps <- complete(imp1, action="long", include=FALSE)
write.csv(imps, file="C:/Users/johnex3/Desktop/Temporary storage/lincc/post_imp.csv")
? complete
library(mice)
library(pan)
? complete
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
pre_imp$mcxt <- pre_imp$monthcount * pre_imp$Tacoma
pre_imp$mcxp <- pre_imp$monthcount * pre_imp$Puyallup
pre_imp$mcxr <- pre_imp$monthcount * pre_imp$Rainier
pre_imp$mcxts <- pre_imp$monthcount * pre_imp$TacomaSouth
pre_imp$mcxt2 <- pre_imp$mcxt^2
pre_imp$mcxp2 <- pre_imp$mcxp^2
pre_imp$mcxr2 <- pre_imp$mcxr^2
pre_imp$mcxts2 <- pre_imp$mcxts^2
pre_imp$mcxt3 <- pre_imp$mcxt^3
pre_imp$mcxp3 <- pre_imp$mcxp^3
pre_imp$mcxr3 <- pre_imp$mcxr^3
pre_imp$mcxts3 <- pre_imp$mcxts^3
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
#...
# specify predictor matrix and imputationMethod
predM1 <- predM
predM1["RUB","StudyID"] <- -2
predM1["systolic_median","StudyID"] <- -2
predM1["diastolic_median","StudyID"] <- -2
predM1["BMI_median","StudyID"] <- -2
predM1["A1C_median","StudyID"] <- -2
predM1["PHQ_max","StudyID"] <- -2
predM1["CHF","StudyID"] <- -2
predM1["Depression","StudyID"] <- -2
predM1["Hypertension","StudyID"] <- -2
predM1["Asthma","StudyID"] <- -2
impM1 <- impM
impM1["RUB"] <- "2l.pan"
impM1["systolic_median"] <- "2l.pan"
impM1["diastolic_median"] <- "2l.pan"
impM1["BMI_median"] <- "2l.pan"
impM1["A1C_median"] <- "2l.pan"
impM1["PHQ_max"] <- "2l.pan"
impM1["CHF"] <- "2l.pan"
impM1["Depression"] <- "2l.pan"
impM1["Hypertension"] <- "2l.pan"
impM1["Asthma"] <- "2l.pan"
# multilevel imputation
imp1 <- mice( as.matrix( pre_imp ) , m = 50 , predictorMatrix = predM1 ,
imputationMethod = impM1 , maxit=50 )
imps <- complete(imp1, action="long", include=TRUE)
write.csv(imps, file="C:/Users/johnex3/Desktop/Temporary storage/lincc/post_imp.csv")
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
pre_imp$mcxt <- pre_imp$monthcount * pre_imp$Tacoma
pre_imp$mcxp <- pre_imp$monthcount * pre_imp$Puyallup
pre_imp$mcxr <- pre_imp$monthcount * pre_imp$Rainier
pre_imp$mcxts <- pre_imp$monthcount * pre_imp$TacomaSouth
pre_imp$mcxt2 <- pre_imp$mcxt^2
pre_imp$mcxp2 <- pre_imp$mcxp^2
pre_imp$mcxr2 <- pre_imp$mcxr^2
pre_imp$mcxts2 <- pre_imp$mcxts^2
pre_imp$mcxt3 <- pre_imp$mcxt^3
pre_imp$mcxp3 <- pre_imp$mcxp^3
pre_imp$mcxr3 <- pre_imp$mcxr^3
pre_imp$mcxts3 <- pre_imp$mcxts^3
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
predM1
predM
library(mice)
library(pan)
pre_imp <- read.csv("C:/Users/johnex3/Desktop/Temporary storage/lincc/pre_imp.csv", header=T)
pre_imp$monthcount2 <- pre_imp$monthcount * pre_imp$monthcount
pre_imp$monthcount3 <- pre_imp$monthcount * pre_imp$monthcount * pre_imp$monthcount
pre_imp$mcxt <- pre_imp$monthcount * pre_imp$Tacoma
pre_imp$mcxp <- pre_imp$monthcount * pre_imp$Puyallup
pre_imp$mcxr <- pre_imp$monthcount * pre_imp$Rainier
pre_imp$mcxts <- pre_imp$monthcount * pre_imp$TacomaSouth
pre_imp$mcxt2 <- pre_imp$mcxt^2
pre_imp$mcxp2 <- pre_imp$mcxp^2
pre_imp$mcxr2 <- pre_imp$mcxr^2
pre_imp$mcxts2 <- pre_imp$mcxts^2
pre_imp$mcxt3 <- pre_imp$mcxt^3
pre_imp$mcxp3 <- pre_imp$mcxp^3
pre_imp$mcxr3 <- pre_imp$mcxr^3
pre_imp$mcxts3 <- pre_imp$mcxts^3
imp0 <- mice( as.matrix(pre_imp)  , maxit=0 )
predM <- imp0$predictorMatrix
impM <- imp0$method
#...
# specify predictor matrix and imputationMethod
predM1 <- predM
predM1["RUB","StudyID"] <- -2
predM1["systolic_median","StudyID"] <- -2
predM1["diastolic_median","StudyID"] <- -2
predM1["BMI_median","StudyID"] <- -2
predM1["A1C_median","StudyID"] <- -2
predM1["PHQ_max","StudyID"] <- -2
impM1 <- impM
impM1["RUB"] <- "2l.pan"
impM1["systolic_median"] <- "2l.pan"
impM1["diastolic_median"] <- "2l.pan"
impM1["BMI_median"] <- "2l.pan"
impM1["A1C_median"] <- "2l.pan"
impM1["PHQ_max"] <- "2l.pan"
# multilevel imputation
imp1 <- mice( as.matrix( pre_imp ) , m = 100 , predictorMatrix = predM1 ,
imputationMethod = impM1 , maxit=50 )
imps <- complete(imp1, action="long", include=TRUE)
write.csv(imps, file="C:/Users/johnex3/Desktop/Temporary storage/lincc/post_imp.csv")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.3.2", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
library(biglasso)
? dbinom
a <- c(.1, 0.1, 0.1)
b <- c(0, 0, 1)
dbinom(b, prob=a, size=3)
dbinom(b, prob=a, size=1)
dbinom(b, prob=a, size=1, log=TRUE)
a <- c(.1, 0.5, 0.1)
dbinom(b, prob=a, size=1, log=TRUE)
library(biglasso)
citation(biglasso)
biglasso
install.packages(c("ranger", "ROCR"))
library(glmnet)
cv.glmnet
? plot.coxph
library(survival)
? plot.coxph
? coxph
library(biglasso)
biglasso
install.packages(c("cvAUC", "geepack", "Hmisc"))
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec()
1 - (1-0.007)^52
1 - (1-0.007474)^52
1 - (1-0.007474)^52.177
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
install.packages(c("car", "caret", "rms"))
library(parallel)
library(doParallel)
library(foreach)
library(glmnet)
library(car)
library(lqa)
library('caret')
setwd("//HOME/johnex3/Opioids 3B/working directory")
lasso_data3 <- read.csv("lasso_data3.csv", header=T)
set.seed(12)
setwd("//HOME/johnex3/Opioids 3B/working directory")
lasso_data3 <- read.csv("lasso_data3.csv", header=T)
set.seed(12)
? predict.glmnet
? predict.cv.glmnet
#### Program information ######################################################
# Source file name: MenA_VaccSims.R                                           #
#### Program information ######################################################
# Package: MenA_VaccSims                                                      #
# Source file name: MenA_VaccSims.R                                           #
# Version Date 12/31/2018                                                     #
#_____________________________________________________________________________#
# PUrpose: run MenA simulations under different vaccination scenarios         #
#   specify scenario, country, region, and number of simulations to run       #
#_____________________________________________________________________________#
# Input: Script builds some inputs from files downloaded                      #
# from vaccineimpact.org/montagu.  Location of the files is an input parameter#
#_____________________________________________________________________________#
# Output: two csv files: detailed output of first ten simulations, and        #
# summarized output of the requested number of simulations                    #
#_____________________________________________________________________________#
# Author: Chris Stewart chris.c.stewart@kp.org 2018                           #
#    adapted from Mike Jackson's SAS version                                  #
#_____________________________________________________________________________#
library(lubridate)
library(doParallel)
library(dplyr)
library(data.table) #melt
# Chloe 2/5/19: Added package to use data.table
library(reshape2)
##parameters to set:
begin<-Sys.time()
mycountry <- "NGA"
start <- as.Date("2000-01-01")
end <- as.Date("2100-12-31")
## NOTE MANY FUNCTIONS APPEAR TO DEPEND ON THESE BEING FIRST AND LAST DATES: EDIT LATER.
myregion <- "hyper"  #"hyper" or "not_hyper"
PSA <- FALSE
vacc_program <- "none" ## "campaign" or "routine" or "both" or "none"
phi<-0.2
sd<-4567 #seed for random sto, use same for all scenarios
nSims<-100  #Update: 100 takes around 12 minutes if using 4 cores.
#directory containing inputs from https://montagu.vaccineimpact.org/
inputdir<-"G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Data/GAVI inputs/201810synthetic_downloaded_2019"
#outputdir<-"C:/Users/krakcx1/Desktop/Sim_output"
outputdir <- "G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Scratch/Temporary output directory"
#directory containing R scripts
#script.dir <- "C:/Users/krakcx1/Desktop/Cloned_meningitis_code"
script.dir <- "H:/Git/MenA R"
###end parameters to set
#script directory contains functions
#ha, need to check script.dir so we can source parameter-checking script
if (dir.exists(script.dir)) {
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
msg<(paste0("MenA_paramcheck.R not found in ", script.dir))
stop(msg)
}
} else {
script.dir<- getSrcDirectory(function(dummy) {dummy})
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
print(paste0("MenA_paramCheck.R not found in ", script.dir))
stop("This script requires 6 other scripts; please put in same directory as this one or specify script directory.")
}
}
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
#check parameters set above
setparams<-as.list(c(mycountry, as.character(start), as.character(end), myregion, PSA, vacc_program, phi, sd, nSims, inputdir, outputdir))
names(setparams)<-c("mycountry", "start", "end", "myregion", "PSA", "vacc_program", "phi", "sd", "nSims", "inputdir", "outputdir")
if (CheckSetParameters(setparams)==FALSE) {
stop(spmessage)
} else {
if (length(spmessage)>1) { print(spmessage) }
}
#country-specific parameters
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
if (CheckDemogParameters(myparams)==FALSE) {
stop(dpmessage)
} else {
if (length(dpmessage)>1) { print(dpmessage) }
}
if (vacc_program!="none") {
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, directory=inputdir)
if (is.data.frame(myvacc)==FALSE) { stop(vaccmsg)}  #check for output
#make as vector of years where nothing happens (empty except for campaign only) for efficiency
if (vacc_program=="campaign") {
nodoses<-as.vector(myvacc[is.na(myvacc$DosesCampaign) | myvacc$DosesCampaign==0,"year"])
}
}
#uSE SAME SEED FOR ALL SCENARIOS (for setting up stochastic parameter)
#Read in parameters calculated in ABC, or a row of parameters to be used by ABC.  Points to model_params.csv
#This file should supply all calibrated parameters, removing all hard-coding throughout the model.
paramfixed <- GetModelParams(path=inputdir, region.val=myregion)
#initialize population
startSize <- myparams[myparams$year==year(start)-1, "totalpop"]
initpop<-InitializePopulation(scriptdir=script.dir, inputdir=inputdir, start=start, end=end, country=mycountry, region=myregion, startSize=startSize)
#check for errors
if (!(is.numeric(initpop))) {
if (disterr!="") { print(disterr) }
if (dxerr!="") { print(dxerr) }
stop(initmsg)
}
summarizeme<-1
seed.vec <- floor(runif(nSims*2, 0, 1000000))[1:nSims]
seed.vec <- unique(floor(runif(nSims*2, 0, 1000000)))[1:nSims]
seed.vec
#begin simulations
#TODO: consider starting seed values for replicability.  Currently unlikely to produce identical results when re-run.
cl <- makeCluster(4)  #scale this upwards if you're on a workstation with >16gb memory
registerDoParallel(cl)
my_data <- foreach(n=1:nSims, .verbose=TRUE, .packages = c("lubridate", "dplyr", "data.table", "reshape2")) %dopar% {
set.seed(seed.vec[n], kind = NULL, normal.kind = NULL)
finalpop<-MenASimulation(startdt=start, enddt=end, fp=paramfixed, initpop=initpop, vacc_program=vacc_program,
countryparams=myparams, region=myregion, country=mycountry, inputdir=inputdir)
if (summarizeme > 0) {
#age-specific death rates (for PSA=no, other option not implemented yet)
cfr <- c(0.106, 0.096, 0.089, 0.086, 0.079, 0.122) #used AFTER simulation macro in SAS
summarizeOneSim(finalpop, n, cfr)
} #end of conditional summarization
} #end of foreach loop
stopCluster(cl)
#for checking by plotting
for.size <- MenASimulation(startdt=start, enddt=end, fp=paramfixed, initpop=initpop, vacc_program=vacc_program,
countryparams=myparams, region=myregion, country=mycountry, inputdir=inputdir)
cohortSize<-getCohortSize(for.size)
totalPop<-cohortSize%>%group_by(IterYear)%>%summarize(tot=sum(cohortsize))
rm(for.size)
? foreach
