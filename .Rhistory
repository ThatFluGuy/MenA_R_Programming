beta.matrix <- array(data=c(0.6,0.4,0.3,0.25), dim=c(2,2))
runSims <- function(beta.m=beta.matrix, delta=0.2, dur=100, pop.size=10000){
# Function inputs:
# beta.m   = 2x2 matrix of beta values (the WAIFW matrix)
# delta    = rate of waning from I to R (days)
# dur      = duration of simulation (days)
# pop.size = size of population
#
# Function outputs:
# The population array
# 1. Set up empty population array
pop <- array(data=0, dim=c(8, 3, dur)) # Dimensions are [age groups, states, time]
# 2. Expand the 2x2 age category beta matrix to an 8x8 age group matrix
# Columns = age group of infectious person, rows = age group of susceptible
waifw <- array(data=0, dim=c(8, 8))
waifw[1:4, 1:4] <- beta.m[1, 1]
waifw[1:4, 5:8] <- beta.m[1, 2]
waifw[5:8, 1:4] <- beta.m[2, 1]
waifw[5:8, 5:8] <- beta.m[2, 2]
# 3. Initialize the population
# (Hard-coded in this example; in reality, the population distribution would be a
# set of inputs to this function)
# Assume one infectious in each age group, rest are susceptible
# Assume even distribution across age groups
pop[1,2,1] <- 8
pop[,1,1] <- (pop.size-8)/8
# 4. Run the simulation
for (t in 2:dur){
pop[,1,t] <- pop[,1,t-1] - rowSums((pop[,1,t-1] %o% pop[,2,t-1]*waifw)/pop.size)
pop[,2,t] <- pop[,2,t-1] + rowSums((pop[,1,t-1] %o% pop[,2,t-1]*waifw)/pop.size) - pop[,2,t-1]*delta
pop[,3,t] <- pop[,3,t-1] + pop[,2,t-1]*delta
}
return(pop)
}
runSims()
toyoutput<-runSims()
dim(toyoutput)
toyoutput[,,1]
toyoutput[,,2]
beta.matrix
waifw
dim(waifw)
waifw <- array(data=0, dim=c(8, 8))
waifw[1:4, 1:4] <- beta.m[1, 1]
waifw[1:4, 5:8] <- beta.m[1, 2]
waifw[5:8, 1:4] <- beta.m[2, 1]
waifw[5:8, 5:8] <- beta.m[2, 2]
beta.m<-beta.matrix
waifw <- array(data=0, dim=c(8, 8))
waifw[1:4, 1:4] <- beta.m[1, 1]
waifw[1:4, 5:8] <- beta.m[1, 2]
waifw[5:8, 1:4] <- beta.m[2, 1]
waifw[5:8, 5:8] <- beta.m[2, 2]
waifw
pop
pop <- array(data=0, dim=c(8, 3, dur))
pop <- array(data=0, dim=c(8, 3, 100))
pop[,1,2]
pop[,,2]
pop[,1,1]
pop[,2,1]
pop[,2,1]*waifw)
pop[,2,1]*waifw
?matrix
pop[2,2,2]
pop[2,2,3]
pop[..3]
pop[..3]
pop[,,3]
waifw
sum(waifw[,3:6])
sum(waifw[1,3:6])
from<-3
to<-6
sum(waifw[1,from:to])
for (k in 1:70){
age <- k
if (k < 30) {
#j = i*12 TO (i*12)+11;
from <- (k-1)*12
to <- from + 11
print(from, to)
#cases[k] <- sum(Inc[from:to,])
}
for (k in 1:70){
age <- k
}
print age
print(age)
for (k in 1:70){
age <- k
print(age)
}
for (k in 1:70){
age <- k
print(age)
if (k < 30) {
#j = i*12 TO (i*12)+11;
from <- (k-1)*12
to <- from + 11
print(to)
#cases[k] <- sum(Inc[from:to,])
}
else {
print('over 30')
#cases[k] <- Inc[361,]/41
}
}
for (k in 1:70){
age <- k
if (k < 30) {
#j = i*12 TO (i*12)+11;
from <- (k-1)*12
to <- from + 11
cases[k] <- sum(Inc[from:to,])
}
else {
print('over 30')
cases[k] <- Inc[361,]/41
}
print(paste(age, cases[k]))
}
?vector
dtvec<-structure(numeric(0), class = "Date")
str(dtvec)
dtvec<-structure(numeric(0), class = "Date", length=60)
str(dtvec)
date()
?vector
start <- as.Date("2001-01-01")
dtvec<-NA
dtvec<-c(dtvec, start)
dtvec
dtvec<-start
dtvec<-c(dtvec, date())
dtvec
dtvec<-c(dtvec, start+7)
dtvec
dtvec<-start
dtvec<-c(dtvec, start+7)
dtvec
year(dtvec[1])
library(lubridate)
year(dtvec[1])
iterdate<-c(iterdate, start)
library(dplyr)
library(openxlsx)
#infileIN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityIN_merged", as.character(Sys.Date()), ".csv")
infileIN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityIN_merged2018-08-09.csv")
INdata<-read.csv(infileIN, stringsAsFactors = FALSE)
INdata$state<-1
#infileTN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityTN_merged", as.character(Sys.Date()), ".csv")
infileTN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityTN_merged2018-08-09.csv")
TNdata<-read.csv(infileTN)
TNdata$state=2
str(TNsata)
str(TNdata)
TNclients<-TNdata%>%group_by(clientID)%>%summarize(payer=max(PROGRAM_DESCRIPTION))
TNdata$payor<-as.character(TNdata$PROGRAM_DESCRIPTION)
TNclients<-TNdata%>%group_by(clientID)%>%summarize(payer=max(payor))
TNclients%>%group_by(payer)%>%summarize(n())
str(TNclients)
str(INdata)
INclients<-INdata%>%group_by(clientID)%>%summarize(payer=max(ProgramDesc))
INclientrs%>%group_by(payer)%>%summarize(n())
INclients%>%group_by(payer)%>%summarize(n())
library(lubridate)
library(dplyr)
library(data.table)
##parameters to set:
begin<-Sys.time()
mycountry <- "ERI"
start <- as.Date("2001-01-01")
end <- as.Date("2100-12-31")
myregion <- "hyper"  #"hyper" or "not_hyper"
PSA <- FALSE
vacc_program <- "none" ## "campaign" or "routine" or "both" or "none"
phi<-0.2
sd<-4567 #seed for random sto, use same for all scenarios
nSims<-10  #100 takes ~ 3 mon, 1000 takes 45
#directory containing inputs from https://montagu.vaccineimpact.org/
inputdir<-"\\\\HOME/stewcc1/MenAModel/download"
outputdir<-"\\\\HOME/stewcc1/MenAModel/data"
#directory containing R scripts
script.dir <- "\\\\home/stewcc1/MenAModel/R_programming"
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
#check parameters set above
setparams<-as.list(c(mycountry, as.character(start), as.character(end), myregion, PSA, vacc_program, phi, sd, nSims, inputdir, outputdir))
names(setparams)<-c("mycountry", "start", "end", "myregion", "PSA", "vacc_program", "phi", "sd", "nSims", "inputdir", "outputdir")
if (CheckSetParameters(setparams)==FALSE) {
stop(spmessage)
} else {
if (length(spmessage)>1) {
print(spmessage)
}
}
#country-specific parameters
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
head(myparams)
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, directory=inputdir)
scenario<-vacc_program
scenario
vacc_program <- "campaign"
scenario<-vacc_program
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, directory=inputdir)
head(myvacc)
flist<-list.files(directory)
if (scenario=="routine" | scenario=="both") {
filename<-flist[grepl("mena-routine",flist)==TRUE]
}
if (scenario=="campaign") {
filename<-flist[grepl("mena-campaign",flist)==TRUE]
}
directory
directory<-inputdif
directory<-inputdir
directory
flist<-list.files(directory)
if (scenario=="routine" | scenario=="both") {
filename<-flist[grepl("mena-routine",flist)==TRUE]
}
if (scenario=="campaign") {
filename<-flist[grepl("mena-campaign",flist)==TRUE]
}
filename
ValidateFilename(directory, filename)
dfvacc<-read.csv(filename[1], stringsAsFactors = FALSE)
head(dfvacc)
IsCountryAndColsAvailable(country_code=mycountry,mydf=dfvacc
)
countrymgs
countrymsg
mycountry
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
IsCountryAndColsAvailable(country_code=mycountry,mydf=dfvacc)
head(dfvacc)
"ERI"
%in% as.vector(dfvacc$country_code)
"ERI" %in% as.vector(dfvacc$country_code)
IsCountryAndColsAvailable(country_code=mycountry,mydf=dfvacc)
country_code
mycountry
head(dfvacc)
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, directory=inputdir)
setwd(directory)
flist<-list.files(directory)
if (scenario=="routine" | scenario=="both") {
filename<-flist[grepl("mena-routine",flist)==TRUE]
}
if (scenario=="campaign") {
filename<-flist[grepl("mena-campaign",flist)==TRUE]
}
if (ValidateFilename(directory, filename)==TRUE) {
dfvacc<-read.csv(filename[1], stringsAsFactors = FALSE)
dfvacc<-read.csv(filename[1], stringsAsFactors = FALSE)
dfvacc<-read.csv(filename[1], stringsAsFactors = FALSE)
countrymsg<<-""
"country_code" %in% colnames(mydf)
mydf<-dfvacc
"country_code" %in% colnames(mydf)
country_code %in% levels(mydf$country_code)
mycountry %in% levels(mydf$country_code)
country_code %in% as.vector(mydf$country_code)
mycountry %in% as.vector(mydf$country_code)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, directory=inputdir)
head(myvacc)
nrow(FALSE)
len(FALSE)
length(FALSE)
is.numeric(FALSE)
is.numeric(dfvacc)
is.numeric(dfvacc)
str(dfvacc)
is.boolean(FALSE)
is.bool(FLASE)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
head(myparams)
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, threshold=0)
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
mycountry<-"ETH"
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
str(citybirthfull)
str(ctrybirthfull)
str(cntrybirthfull)
is.data.frame(FALSE)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
path<-inputdir
fillThreshold<-0
setwd(path)
flist<-list.files(path)
totpop<-flist[grepl("tot_pop_both",flist)==TRUE]
#check length of totpop to validate filename
if (ValidateFilename(path, totpop)==FALSE) { stop(mymsg) }
dfpop<-read.csv(totpop)
head(dfpop)
IsCountryAndColsAvailable(mycountry, dfpop)
ctrypop<-dfpop[dfpop$country_code==mycountry, c("country_code", "year", "value")]
ctrypopfull<-checkVIMCdates(mydata=ctrypop, startyr=year(start), endyr=year(end), threshold=fillThreshold)
str(ctrypopfull)
if (is.data.frame(ctrypopfull)==FALSE) { stop(datemsg) }
cbr<-flist[grepl("cbr_both",flist)==TRUE]
if (ValidateFilename(path, cbr)==FALSE) { stop(mymsg) }
dfbirth<-read.csv(cbr[1])
if (IsCountryAndColsAvailable(mycountry, dfbirth)==FALSE) { stop(countrymsg) }
ctrybirth<-dfbirth[dfbirth$country_code==mycountry, c("country_code", "year", "value")]
ctrybirthfull<-checkVIMCdates(mydata=ctrybirth, startyr=year(start), endyr=year(end), threshold=fillThreshold)
str(ctrybirthfull)
if (is.data.frame(ctrybirthfull)==FALSE) { stop(datemsg) }
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=1)
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=0)
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end, fillThreshold=1)
head(myparams)
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
head(dfvacc)
DemogNumVarExists("coverage", dfvacc)
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('//home/stewcc1/MenAModel/R_programming/MenA_RunFourVaccScenarios.R')
?data.table
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
?subset
