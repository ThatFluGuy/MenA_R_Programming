citation()
library(geepack)
install.packages("geepack")
# install.packages("geepack")
library(geepack)
citation(geepack)
citation("geepack")
library(lubridate)
library(dplyr)
library(data.table) #melt
# Chloe 2/5/19: Added package to use data.table
library(reshape2)
##parameters to set:
begin<-Sys.time()
mycountry <- "NGA"
start <- as.Date("2000-01-01")
end <- as.Date("2100-12-31")
## NOTE MANY FUNCTIONS APPEAR TO DEPEND ON THESE BEING FIRST AND LAST DATES: EDIT LATER.
myregion <- "hyper"  #"hyper" or "not_hyper"
PSA <- FALSE
vacc_program <- "none" ## "campaign" or "routine" or "both" or "none"
phi<-0.2
sd<-4567 #seed for random sto, use same for all scenarios
nSims<-10  #100 takes ~ 3 mon, 1000 takes 45
#directory containing inputs from https://montagu.vaccineimpact.org/
inputdir<-"G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Data/GAVI inputs/201810synthetic_downloaded_2019"
outputdir<-"C:/Users/krakcx1/Desktop/Sim_output"
#directory containing R scripts
script.dir <- "C:/Users/krakcx1/Desktop/Cloned_meningitis_code"
###end parameters to set
#script directory contains functions
#ha, need to check script.dir so we can source parameter-checking script
if (dir.exists(script.dir)) {
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
msg<(paste0("MenA_paramcheck.R not found in ", script.dir))
stop(msg)
}
} else {
script.dir<- getSrcDirectory(function(dummy) {dummy})
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
print(paste0("MenA_paramCheck.R not found in ", script.dir))
stop("This script requires 6 other scripts; please put in same directory as this one or specify script directory.")
}
}
setwd(script.dir)
source("MenA_paramCheck.R")
source("ModelInputUtilities.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
#check parameters set above
setparams<-as.list(c(mycountry, as.character(start), as.character(end), myregion, PSA, vacc_program, phi, sd, nSims, inputdir, outputdir))
names(setparams)<-c("mycountry", "start", "end", "myregion", "PSA", "vacc_program", "phi", "sd", "nSims", "inputdir", "outputdir")
if (CheckSetParameters(setparams)==FALSE) {
stop(spmessage)
} else {
if (length(spmessage)>1) { print(spmessage) }
}
#country-specific parameters
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
if (CheckDemogParameters(myparams)==FALSE) {
stop(dpmessage)
} else {
if (length(dpmessage)>1) { print(dpmessage) }
}
# Chloe 5/22: I am not bothering with editing the error message at this point ("Error: v variable missing from demographic parameters."),
# since I'm not sure if the use of variable death rates by age above imr is going to be standard.
if (vacc_program!="none") {
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, directory=inputdir)
if (is.data.frame(myvacc)==FALSE) { stop(vaccmsg)}  #check for output
#make as vector of years where nothing happens (empty except for campaign only) for efficiency
if (vacc_program=="campaign") {
nodoses<-as.vector(myvacc[is.na(myvacc$DosesCampaign) | myvacc$DosesCampaign==0,"year"])
}
}
#fixed parameters
#uSE SAME SEED FOR ALL SCENARIOS (for setting up stochastic parameter)
set.seed(sd, kind = NULL, normal.kind = NULL)
paramfixed<-c(0.23334,0.70002,0.25,0.90,0.75,1.00,0.00000096)
names(paramfixed)<-c("rc","rd","lc","ld","hc","hd","foii")
#disease model for rainy and dry
dxrisk<-rbind(c(0.0018, -0.00000021),
c(0.0019, -0.0000002))
dimnames(dxrisk)[[1]]<-c("rainy", "dry")
#WAIFW matrix setup
wboth<-GetWAIFWmatrix(path=script.dir, region=myregion)
if (!(is.numeric(wboth))) {
stop(waifwerr)
}
#initialize population
startSize <- myparams[myparams$year==year(start)-1, "totalpop"]
initpop<-InitializePopulation(scriptdir=script.dir, inputdir=inputdir, start=start, end=end, popsize=startSize, country=mycountry, region=myregion)
#check for errors
if (!(is.numeric(initpop))) {
if (disterr!="") { print(disterr) }
if (dxerr!="") { print(dxerr) }
stop(initmsg)
}
dim(initpop)
dim(myparams)
head(myparams)
