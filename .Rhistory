beta.matrix <- array(data=c(0.6,0.4,0.3,0.25), dim=c(2,2))
runSims <- function(beta.m=beta.matrix, delta=0.2, dur=100, pop.size=10000){
# Function inputs:
# beta.m   = 2x2 matrix of beta values (the WAIFW matrix)
# delta    = rate of waning from I to R (days)
# dur      = duration of simulation (days)
# pop.size = size of population
#
# Function outputs:
# The population array
# 1. Set up empty population array
pop <- array(data=0, dim=c(8, 3, dur)) # Dimensions are [age groups, states, time]
# 2. Expand the 2x2 age category beta matrix to an 8x8 age group matrix
# Columns = age group of infectious person, rows = age group of susceptible
waifw <- array(data=0, dim=c(8, 8))
waifw[1:4, 1:4] <- beta.m[1, 1]
waifw[1:4, 5:8] <- beta.m[1, 2]
waifw[5:8, 1:4] <- beta.m[2, 1]
waifw[5:8, 5:8] <- beta.m[2, 2]
# 3. Initialize the population
# (Hard-coded in this example; in reality, the population distribution would be a
# set of inputs to this function)
# Assume one infectious in each age group, rest are susceptible
# Assume even distribution across age groups
pop[1,2,1] <- 8
pop[,1,1] <- (pop.size-8)/8
# 4. Run the simulation
for (t in 2:dur){
pop[,1,t] <- pop[,1,t-1] - rowSums((pop[,1,t-1] %o% pop[,2,t-1]*waifw)/pop.size)
pop[,2,t] <- pop[,2,t-1] + rowSums((pop[,1,t-1] %o% pop[,2,t-1]*waifw)/pop.size) - pop[,2,t-1]*delta
pop[,3,t] <- pop[,3,t-1] + pop[,2,t-1]*delta
}
return(pop)
}
runSims()
toyoutput<-runSims()
dim(toyoutput)
toyoutput[,,1]
toyoutput[,,2]
beta.matrix
waifw
dim(waifw)
waifw <- array(data=0, dim=c(8, 8))
waifw[1:4, 1:4] <- beta.m[1, 1]
waifw[1:4, 5:8] <- beta.m[1, 2]
waifw[5:8, 1:4] <- beta.m[2, 1]
waifw[5:8, 5:8] <- beta.m[2, 2]
beta.m<-beta.matrix
waifw <- array(data=0, dim=c(8, 8))
waifw[1:4, 1:4] <- beta.m[1, 1]
waifw[1:4, 5:8] <- beta.m[1, 2]
waifw[5:8, 1:4] <- beta.m[2, 1]
waifw[5:8, 5:8] <- beta.m[2, 2]
waifw
pop
pop <- array(data=0, dim=c(8, 3, dur))
pop <- array(data=0, dim=c(8, 3, 100))
pop[,1,2]
pop[,,2]
pop[,1,1]
pop[,2,1]
pop[,2,1]*waifw)
pop[,2,1]*waifw
?matrix
pop[2,2,2]
pop[2,2,3]
pop[..3]
pop[..3]
pop[,,3]
waifw
sum(waifw[,3:6])
sum(waifw[1,3:6])
from<-3
to<-6
sum(waifw[1,from:to])
for (k in 1:70){
age <- k
if (k < 30) {
#j = i*12 TO (i*12)+11;
from <- (k-1)*12
to <- from + 11
print(from, to)
#cases[k] <- sum(Inc[from:to,])
}
for (k in 1:70){
age <- k
}
print age
print(age)
for (k in 1:70){
age <- k
print(age)
}
for (k in 1:70){
age <- k
print(age)
if (k < 30) {
#j = i*12 TO (i*12)+11;
from <- (k-1)*12
to <- from + 11
print(to)
#cases[k] <- sum(Inc[from:to,])
}
else {
print('over 30')
#cases[k] <- Inc[361,]/41
}
}
for (k in 1:70){
age <- k
if (k < 30) {
#j = i*12 TO (i*12)+11;
from <- (k-1)*12
to <- from + 11
cases[k] <- sum(Inc[from:to,])
}
else {
print('over 30')
cases[k] <- Inc[361,]/41
}
print(paste(age, cases[k]))
}
?vector
dtvec<-structure(numeric(0), class = "Date")
str(dtvec)
dtvec<-structure(numeric(0), class = "Date", length=60)
str(dtvec)
date()
?vector
start <- as.Date("2001-01-01")
dtvec<-NA
dtvec<-c(dtvec, start)
dtvec
dtvec<-start
dtvec<-c(dtvec, date())
dtvec
dtvec<-c(dtvec, start+7)
dtvec
dtvec<-start
dtvec<-c(dtvec, start+7)
dtvec
year(dtvec[1])
library(lubridate)
year(dtvec[1])
iterdate<-c(iterdate, start)
library(dplyr)
library(openxlsx)
#infileIN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityIN_merged", as.character(Sys.Date()), ".csv")
infileIN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityIN_merged2018-08-09.csv")
INdata<-read.csv(infileIN, stringsAsFactors = FALSE)
INdata$state<-1
#infileTN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityTN_merged", as.character(Sys.Date()), ".csv")
infileTN<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/FidelityTN_merged2018-08-09.csv")
TNdata<-read.csv(infileTN)
TNdata$state=2
str(TNsata)
str(TNdata)
TNclients<-TNdata%>%group_by(clientID)%>%summarize(payer=max(PROGRAM_DESCRIPTION))
TNdata$payor<-as.character(TNdata$PROGRAM_DESCRIPTION)
TNclients<-TNdata%>%group_by(clientID)%>%summarize(payer=max(payor))
TNclients%>%group_by(payer)%>%summarize(n())
str(TNclients)
str(INdata)
INclients<-INdata%>%group_by(clientID)%>%summarize(payer=max(ProgramDesc))
INclientrs%>%group_by(payer)%>%summarize(n())
INclients%>%group_by(payer)%>%summarize(n())
library(openxlsx)
library(dplyr)
setwd("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Client_Demographics")
masterlist<-"All Client IDs for Chris_111618.xlsx"
openxlsx::getSheetNames(masterlist)
TNclients<-read.xlsx(xlsxFile=masterlist, sheet="TN")
TNclients$state<-2
INclients<-read.xlsx(xlsxFile=masterlist, sheet="IN")
INclients$state<-1
allclients<-rbind(INclients, TNclients)
allclients$clientID<-allclients$Client.ID
# N + = 30523
#this dataset is currently missing some people, but worrying about that elsewhere.
demogdata<-read.xlsx("IN_TN Demographic Data_062818.xlsx", detectDates = TRUE)
demogunique<-demogdata%>%dplyr::group_by(Client.Research.ID)%>%dplyr::summarize(Age=max(Age), Gender=max(Gender), RaceType = min(RaceType), Ethnicity=min(Ethnicity), FamilyIncome=max(FamilyIncome),PrimaryPayor=max(PrimaryPayor))
demogunique$clientID<-demogunique$Client.Research.ID
#n=26747
#fix client IDs
setwd("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/TN_Fidelity_working")
xwalkT<-read.xlsx("TNCorrect Non-Research IDs.xlsx")
colnames(xwalkT)[colnames(xwalkT)=="Wrong"] <- "clientID"
setwd("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/IN_Fidelity_working")
xwalkI<-read.xlsx("INCorrect Non-Research IDs.xlsx")
colnames(xwalkI)[colnames(xwalkI)=="Wrong"] <- "clientID"
fixClientIDs<-function(indata, reflist){
outdata<-merge(x = indata, y = reflist, by = "clientID", all.x = TRUE)
pFix<-outdata[!is.na(outdata$Correct.Research.ID),]
fix_message <<- paste(nrow(pFix), 'clientIDs corrected with multiple-clientID crosswalk.')
outdata$clientID<-ifelse(!is.na(outdata$Correct.Research.ID), outdata$Correct.Research.ID, outdata$clientID)
return(outdata)
}
demogunique1<-fixClientIDs(demogunique, xwalkI[, 4:5])  #n=9
demogunique2<-fixClientIDs(demogunique, xwalkT[, 4:5])  #n=2555
#remove ROI decliners from this part
setwd("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Downloaded 041818")
recruit<-read.csv("iMBC_ClientRecruitmentData_FINAL_LK edits_ 7.20.18.csv")
remove<-recruit[!is.na(recruit$CRQ9_Verbal.ROI) & recruit$CRQ9_Verbal.ROI==2,]
removes<-as.vector(as.character(remove$CRQ2_ID))
demogunique2<-demogunique1[!(demogunique1 %in% removes),]
#left join with master list
demog_full<-merge(x=allclients, y=demogunique2, by="clientID", all.x=TRUE)
demog_full$inDemog<-ifelse(is.na(demog_full$Client.Research.ID), 1, 0)
nodemog<-demog_full[is.na(demog_full$Client.Research.ID),] #n=3924, 84% IN
infile<-paste0("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Output/Fidelity_both2018-11-29.csv")
mydfraw<-read.csv(infile, stringsAsFactors = FALSE)
mydfraw$clinicianStartdt<-as.Date(mydfraw$clinicianStart)
mydfraw$ActiveImp5moEnddt<-as.Date(mydfraw$clinicianEnd5Mo)
mydfraw$Sustain15moEnddt<-as.Date(mydfraw$Date.of.15.month)
mydfraw$AfterImp<-ifelse(mydfraw$clinicianStartdt<=as.Date(mydfraw$date), 1, 0)
mydfraw$visdate<-as.Date(mydfraw$date)
#trim stuff we don't need
mydf<-subset(mydfraw, select=c(clientID, date, visdate, clinicianStartdt, ActiveImp5moEnddt, Sustain15moEnddt, AfterImp, state, site, PrimaryClin))
#first visit in fidelity data
vis1<-mydf%>%dplyr::group_by(clientID)%>%dplyr::summarize(firstvisit=min(visdate))
#set "study entry data" (as sent to Angus for payer ref) the first available of:
##-First visit in active implementation window
##-First visit after clinician’s start date
##-Last visit before clinician’s start date
implgp<-mydf%>%dplyr::group_by(clientID,  AfterImp, clinicianStartdt, ActiveImp5moEnddt, Sustain15moEnddt)%>%dplyr::summarize(minvisit=min(visdate), maxvisit=max(visdate))
implgp$studyentry<-if_else(implgp$AfterImp==1, implgp$minvisit, implgp$maxvisit)
#drop out afterimp - is visit-specific
demogdates<-implgp%>%dplyr::group_by(clientID,clinicianStartdt, ActiveImp5moEnddt, Sustain15moEnddt)%>%dplyr::summarize(rowcount=n(), studyentry=min(studyentry))
demogdates1<-merge(x=demogdates, y=vis1, by="clientID")
#left join
demogfullDates<-merge(x=demog_full, y=demogdates1, by="clientID", all.x=TRUE)
str(demogfullDates)
demogfullDates$inFidelity<-ifelse(is.na(demogfullDates$firstvisit, 0, 1))
demogfullDates$inFidelity<-ifelse(is.na(demogfullDates$firstvisit), 0, 1)
demogfullDates%>%group_by(inDemog, inFidelity)%>%summarize(n())
setwd("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Client_Demographics")
intakefile<-"Intake Data_IN + TN_updated111318.xlsx"
#openxlsx::getSheetNames(intakefile)   "Tennessee" "Indiana"
TNintake<-read.xlsx(xlsxFile=intakefile, sheet=1, detectDates=TRUE)
Tnsum<-TNintake%>%group_by(Client.ID, intakedate)%>%summarize(rowcount=n())
Tnsum%>%group_by(rowcount)%>%summarize(n())
#23 dups - the one that isn't a missing client has two intakes of different types
TNinkeep<-TNintake[!is.na(TNintake$Client.ID),]
colnames(TNinkeep)[colnames(TNinkeep)=="Staff.ID"] <- "Clinician.ID"
INintake<-read.xlsx(xlsxFile=intakefile, sheet=2, detectDates=TRUE)
Insum<-INintake%>%group_by(Client.ID, intakedate)%>%summarize(rowcount=n())
Insum%>%group_by(rowcount)%>%summarize(n())
indups<-Insum[Insum$rowcount>1,]
lookat<-INintake[INintake$Client.ID %in% as.vector(indups$Client.ID),]
#103 dups, look to be exact
INinkeep<-INintake[!duplicated(INintake),]
intake<-rbind(TNinkeep, INinkeep)
intake$clientID<-intake$Client.ID
intake$clinician.ID<-ifelse(is.na(intake$Clinician.ID), 0, intake$Clinician.ID)
#most have one NA clinician + 1 populated clinician
intakefinal<-intake%>%group_by(clientID, intakedate)%>%summarize(intakeClinician=max(Clinician.ID), type=max(Activity), rowcount=n())
intakefinal1<-intakefinal%>%group_by(clientID)%>%summarize(minintake=min(intakedate), maxintake=max(intakedate))
#LEFT JOIN
demogFullIn<-merge(x=demogfullDates, y=intakefinal1, by="clientID", all.x=TRUE)
demogFullIn$HasIntake<-ifelse(is.na(demogFullIn$minintake), 0, 1)
#new client var - intake must be from 2 weeks before implementation start to end of sustainment
demogFullIn$ImpToIntake1<-demogFullIn$minintake-demogFullIn$clinicianStartdt
demogFullIn$ImpToIntake2<-demogFullIn$maxintake-demogFullIn$clinicianStartdt
#do for min intake then max
demogFullIn$NewClient<-ifelse(is.na(demogFullIn$minintake), 0, ifelse(demogFullIn$minintake > demogFullIn$clinicianStartdt-14 & demogFullIn$minintake < demogFullIn$ActiveImp5moEnddt+14, 1, 0 ))
demogFullIn$NewClient<-ifelse(demogFullIn$maxintake > demogFullIn$clinicianStartdt-14 & demogFullIn$maxintake < demogFullIn$ActiveImp5moEnddt+14, 1, demogFullIn$NewClient)
demogFullIn%>%group_by(HasIntake, NewClient)%>%summarize(n())
newzero<-demogfullIn[demogfullIn$HasIntake==1 & demogfullIn$New]
newzero<-demogFullIn[demogFullIn$HasIntake==1 & demogFullIn$NewClient==0,]
summary(newzero)
newzero$twoIntakes<-ifelse(newzero$minintake==newzero$maxintake, 0, 1)
newzero%>%group_by(twoIntakes)%>%summarize(n())
head(newzero[is.na(newzero$twoIntakes),])
dist<-newzero%>%group_by(ImptoIntake1)%>%summarize(n())
str(newzero)
dist<-newzero%>%group_by(ImpToIntake1)%>%summarize(n())
head(dist)
View(dist)
View(dist)
View(dist)
outfile<-"c:/intaketiming.csv"
write.csv(dist, outfile)
hist(dist)
dist$daysnum<-as.numeric(dist$ImpToIntake1)
hist(dist)
hist(dist$daysnum)
demogFullIn<-merge(x=demogfullDates, y=intakefinal1, by="clientID", all.x=TRUE)
demogFullIn$HasIntake<-ifelse(is.na(demogFullIn$minintake), 0, 1)
#new client var - intake must be from 2 weeks before implementation start to end of sustainment
demogFullIn$ImpToIntake1<-demogFullIn$minintake-demogFullIn$clinicianStartdt
demogFullIn$ImpToIntake2<-demogFullIn$maxintake-demogFullIn$clinicianStartdt
#do for min intake then max
demogFullIn$NewClient<-ifelse(is.na(demogFullIn$minintake), 0, ifelse(demogFullIn$minintake > demogFullIn$clinicianStartdt-14 & demogFullIn$minintake < demogFullIn$ActiveImp5moEnddt+14, 1, 0 ))
demogFullIn$NewClient<-ifelse(demogFullIn$maxintake > demogFullIn$clinicianStartdt-14 & demogFullIn$maxintake < demogFullIn$ActiveImp5moEnddt+14, 1, demogFullIn$NewClient)
#clean up some that don't get caught
demogFullIn$NewClient<-ifelse(demogFullIn$ImpToIntake1> -15 | demogFullIn$ImpToIntake1 < 152, 1, demogFullIn$NewClient)
demogFullIn$NewClient<-ifelse(demogFullIn$ImpToIntake2> -15 | demogFullIn$ImpToIntake2 < 152, 1, demogFullIn$NewClient)
demogFullIn%>%group_by(HasIntake, NewClient)%>%summarize(n())
new<-demogFullIn[demogFullIn$NewClient==1,]
newdist%>%new%>%group_by(ImpToIntake1)%>%summarize(n())
newdist<-new%>%group_by(ImpToIntake1)%>%summarize(n())
summary(newdist)
summary(new)
new$numimptoIntake<-as.numeric(new$ImpToIntake1)
summary(new)
demogFullIn<-merge(x=demogfullDates, y=intakefinal1, by="clientID", all.x=TRUE)
demogFullIn$HasIntake<-ifelse(is.na(demogFullIn$minintake), 0, 1)
#new client var - intake must be from 2 weeks before implementation start to end of sustainment
demogFullIn$ImpToIntake1<-as.numeric(demogFullIn$minintake-demogFullIn$clinicianStartdt)
demogFullIn$ImpToIntake2<-as.numeric(demogFullIn$maxintake-demogFullIn$clinicianStartdt)
#do for min intake then max
demogFullIn$NewClient<-ifelse(is.na(demogFullIn$minintake), 0, ifelse(demogFullIn$minintake > demogFullIn$clinicianStartdt-14 & demogFullIn$minintake < demogFullIn$ActiveImp5moEnddt+14, 1, 0 ))
demogFullIn$NewClient<-ifelse(demogFullIn$maxintake > demogFullIn$clinicianStartdt-14 & demogFullIn$maxintake < demogFullIn$ActiveImp5moEnddt+14, 1, demogFullIn$NewClient)
#clean up some that don't get caught
demogFullIn$NewClient<-ifelse(demogFullIn$ImpToIntake1> -15 | demogFullIn$ImpToIntake1 < 152, 1, demogFullIn$NewClient)
demogFullIn$NewClient<-ifelse(demogFullIn$ImpToIntake2> -15 | demogFullIn$ImpToIntake2 < 152, 1, demogFullIn$NewClient)
demogFullIn%>%group_by(HasIntake, NewClient)%>%summarize(n())
str(demogFullIn)
?between
ifelse(between(demogFullIn$ImpToIntake2, -14,152)
between(demogFullIn$ImpToIntake2, -14,152)
between(demogFullIn$ImpToIntake2, -14,152)
demogFullIn<-merge(x=demogfullDates, y=intakefinal1, by="clientID", all.x=TRUE)
demogFullIn$HasIntake<-ifelse(is.na(demogFullIn$minintake), 0, 1)
#new client var - intake must be from 2 weeks before implementation start to end of sustainment
demogFullIn$ImpToIntake1<-as.numeric(demogFullIn$minintake-demogFullIn$clinicianStartdt)
demogFullIn$ImpToIntake2<-as.numeric(demogFullIn$maxintake-demogFullIn$clinicianStartdt)
#do for min intake then max
demogFullIn$NewClient<-ifelse(is.na(demogFullIn$minintake), 0, ifelse(demogFullIn$minintake > demogFullIn$clinicianStartdt-14 & demogFullIn$minintake < demogFullIn$ActiveImp5moEnddt+14, 1, 0 ))
demogFullIn$NewClient<-ifelse(demogFullIn$maxintake > demogFullIn$clinicianStartdt-14 & demogFullIn$maxintake < demogFullIn$ActiveImp5moEnddt+14, 1, demogFullIn$NewClient)
#clean up some that don't get caught
demogFullIn$NewClient<-ifelse(between(demogFullIn$ImpToIntake1, -14,152), 1, demogFullIn$NewClient)
demogFullIn$NewClient<-ifelse(between(demogFullIn$ImpToIntake2, -14,152), 1, demogFullIn$NewClient)
demogFullIn%>%group_by(HasIntake, NewClient)%>%summarize(n())
paper<-mydfraw[mydfraw$Inpaper==1,]
paperclients<-paper%>%group_by(clientID)%>%summarize(rowcount=n())
nrow(paperclients)
nrow(paper)
paper<-mydfraw[mydfraw$InPaper==1,]
nrow(paper)
paperclients<-paper%>%group_by(clientID)%>%summarize(rowcount=n())
nrow(paperclients)
outfile<-"c:/paper_clients.csv"
write.csv(paperclient, outfile)
write.csv(paperclients, outfile)
str(demogFullIn)
summary(demogFullIn)
setwd("\\\\groups/data/CTRHS/IMBC/PROGRAMMING/Client_Demographics")
ptinfile<-"Psychotherapy History_IN 111618.xlsx"
read_excel_allsheets <- function(filename) {
sheets <- openxlsx::getSheetNames(filename)
shList <- lapply(sheets,openxlsx::read.xlsx,xlsxFile=filename, detectDates=TRUE)
names(shList) <- sheets
shdata <- as.data.frame(data.table::rbindlist(shList, fill=TRUE, idcol=TRUE), stringsAsFactors=FALSE)
#  names(shdata)
}
inPTdf<-read_excel_allsheets(ptinfile)
ptTNfile<-"Psychotherapy History_TN111618.xlsx"
tnPTdf<-read_excel_allsheets(ptTNfile)
allPT<-rbind(inPTdf, tnPTdf)
#better here to max the Staff.ID
ptunique<-allPT%>%group_by(Client.ID, ServiceDate)%>%summarize(Staff.ID=max(Staff.ID) )
#limit to those not in fidelity already
colnames(ptunique)[colnames(ptunique)=="Client.ID"] <- "clientID"
colnames(ptunique)[colnames(ptunique)=="ServiceDate"] <- "visdate"
alljoin<-merge(x=ptunique, y=mydf, by=c("clientID", "visdate"), all.x=TRUE)
alljoin$inFID<-ifelse(is.na(alljoin$PrimaryClin), 0, 1)
prior<-alljoin[alljoin$inFID==0,]
priorcount<-prior%>%group_by(clientID)%>%summarize(priorcount=n())
#now get visits prior to study entry date in fidelity data
#attach first visit date to all visits
fidvisits<-merge(x=mydf, y=demogFullIn, by="clientID", all.x=TRUE)
earlyfidvisits<-fidvisits[fidvisits$visdate > fidvisits$studyentry,]
earlyunique<-earlyfidvisits%>%group_by(clientID, visdate)%>%summarize(rowcount=n())
earlycount<-earlyunique%>%group_by(clientID)%>%summarize(earlycount=n())
#put them together and sum
allhist<-merge(x=priorcount, y=earlycount, by="clientID", all=TRUE)
allhist$priorPTvis<-ifelse(is.na(allhist$priorcount), allhist$earlycount, ifelse(is.na(allhist$earlycount), allhist$priorcount, allhist$earlycount + allhist$priorcount))
str(alljoin)
head(prior)
head(prior[prior$inFID==1,])
head(prior)
prior%>%group_by(inFID)%>%summarize(n())
nrow(ptunique)
nrow(mydf)
str(mydf)
alljoin<-merge(x=ptunique, y=mydf, by=c("clientID", "visdate"), all.x=TRUE)
nrow(alljoin)
alljoin$inFID<-ifelse(is.na(alljoin$PrimaryClin), 0, 1)
prior<-alljoin[alljoin$inFID==0,]
nrow(alljoin)
nrow(prior)
head(prior)
head(prior[prior$inFID==1,])
head(prior)
str(mydf)
ptunique<-allPT%>%group_by(Client.ID, ServiceDate)%>%summarize(Staff.ID=max(Staff.ID))
colnames(ptunique)[colnames(ptunique)=="Client.ID"] <- "clientID"
colnames(ptunique)[colnames(ptunique)=="ServiceDate"] <- "visdate"
#attach first visit date to all visits
fidvisits<-merge(x=mydf, y=demogFullIn, by="clientID", all.x=TRUE)
str(fidvisits)
str(ptunique)
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
begin<-Sys.time()
mycountry <- "ETH"
start <- as.Date("2001-01-01")
end <- as.Date("2100-12-31")
myregion <- "not_hyper"
PSA <- FALSE
Vaccination<-TRUE
program <- "none" ## "campaign" or "routine" or "both" or "none"
phi<-0.2
sd<-456 #seed for random sto, use same for all scenarios
nSims<-100
#directory containing inputs from https://montagu.vaccineimpact.org/
inputdir<-"\\\\HOME/stewcc1/MenAModel/download"
#directory containing R scripts
script.dir <- "\\\\home/stewcc1/MenAModel/R_programming"
#script.dir <- dirname(sys.frame(1)$ofile)
###end parameters to set
setwd(script.dir)
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=program, directory=inputdir)
mycountry
program
inputdir
setwd(inputdir)
flist<-list.files(directory)
if (scenario=="routine") {
filename<-flist[grepl("mena-routine",flist)==TRUE]
}
if (scenario=="campaign") {
filename<-flist[grepl("mena-campaign",flist)==TRUE]
}
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=program, directory=inputdir)
program
flist<-list.files(directory)
if (program=="routine") {
filename<-flist[grepl("mena-routine",flist)==TRUE]
}
if (program=="campaign") {
filename<-flist[grepl("mena-campaign",flist)==TRUE]
}
filename
flist<-list.files(directory)
flist<-list.files(inputdir)
flist
flist<-list.files(directory)
if (program=="routine") {
filename<-flist[grepl("mena-routine",flist)==TRUE]
}
if (program=="campaign") {
filename<-flist[grepl("mena-campaign",flist)==TRUE]
}
filename
dfvacc<-read.csv(filename[1], stringsAsFactors = FALSE)
ctryvacc<-dfvacc[dfvacc$country_code==mycountry, c("country_code", "country", "year","vaccine", "activity_type", "age_last", "target" , "coverage")]
ctryvacc<-dfvacc[dfvacc$country_code==mycountry, c("country_code", "country", "year","vaccine", "activity_type", "age_last", "target" , "coverage")]
colnames(ctryvacc)[colnames(ctryvacc)=="coverage"] <-"CoverRoutine"
colnames(ctryvacc)[colnames(ctryvacc)=="age_last"] <-"AgeLimCampaign"
##target has "<NA>" as character, hosing conversion
ctryvacc$DosesCampaign<-as.numeric(ctryvacc$target)
newdf<-subset(ctryvacc, select=-c(target))
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=program, directory=inputdir)
setwd(script.dir)
source("ModelInputUtilities.R")
source("InitializePopulation.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
#country-specific parameters
myparams<-GetDemographicParameters(path=inputdir,  mycountry=mycountry, start=start, end=end)
#setwd("\\\\HOME/stewcc1/MenAModel/Rdata")
#params<-read.csv("country_params.csv")
#myparams1 <-params[params$country==mycountry & params$year>=year(start)-1 & params$year<=year(end) ,]
if (Vaccination!=FALSE) {
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=program, directory=inputdir)
}
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
pr <- vlookup[vlookup$year==year(mydate),"CoverRoutine"]
pr <- myvacc[vlookup$year==2001,"CoverRoutine"]
pr <- myvacc[myvacc$year==2001,"CoverRoutine"]
pr
head(myvacc)
myvacc[myvacc$year==2001,"CoverRoutine"]
str(pr)
head(myvacc[myvacc$year>1999,"CoverRoutine"])
pr <- myvacc[myvacc$year==2001,]
pr
pr <- vlookup[vlookup$year==year(mydate) & vlookup$activity_type=="routine","CoverRoutine"]
pr <- myvacc[myvacc$year==year(mydate) & myvacc$activity_type=="routine","CoverRoutine"]
pr <- myvacc[myvacc$year==2001 & myvacc$activity_type=="routine","CoverRoutine"]
pr
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
warnings()
source('H:/MenAModel/R_programming/MenA_VaccSims.R')
