inf.v[1:20]
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
x4 <- apply(X=x3, MARGIN=c(2,3), FUN=sum)
x4 <- x4[,-1]
inf.v <- x4[1,1] - x4[1,]
inf.v[1:20]
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
x4 <- apply(X=x3, MARGIN=c(2,3), FUN=sum)
x4 <- x4[,-1]
inf.v <- x4[1,1] - x4[1,]
inf.v[1:20]
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
path <- "H:/Scratch/GAMAout/roc31v/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
x4 <- apply(X=x3, MARGIN=c(2,3), FUN=sum)
x4 <- x4[,-1]
inf.v <- x4[1,1] - x4[1,]
inf.v[1:20]
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
inf.v
# Plot percent of each sub-population infected
for (m in 1:dim(x1)[1]){
x2 <- x1[m,,,]
size.v  <- apply(X=x2[, 1:3, 2], MARGIN=1, FUN=sum)
# Proportion infectives in each age group
plot(1:days, x2[1, 3, 1:days]/size.v[1], type="l", col="black", ylim=c(0, 1),
main=paste(m, "  ", round(1 - sum(x2[,1,days])/sum(x2[,1,2]), 3)))
lines(1:days, x2[2, 3, 1:days]/size.v[2], col="blue")
lines(1:days, x2[3, 3, 1:days]/size.v[3], col="red")
lines(1:days, x2[4, 3, 1:days]/size.v[4], col="green")
lines(1:days, x2[5, 3, 1:days]/size.v[5], col="orange")
lines(1:days, x2[6, 3, 1:days]/size.v[6], col="magenta")
}
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
x4 <- apply(X=x3, MARGIN=c(2,3), FUN=sum)
x4 <- x4[,-1]
inf.v <- x4[1,1] - x4[1,]
inf.v[1:20]
# Plot percent of each sub-population infected
for (m in 1:dim(x1)[1]){
x2 <- x1[m,,,]
size.v  <- apply(X=x2[, 1:3, 2], MARGIN=1, FUN=sum)
# Proportion infectives in each age group
plot(1:days, x2[1, 3, 1:days]/size.v[1], type="l", col="black", ylim=c(0, 1),
main=paste(m, "  ", round(1 - sum(x2[,1,days])/sum(x2[,1,2]), 3)))
lines(1:days, x2[2, 3, 1:days]/size.v[2], col="blue")
lines(1:days, x2[3, 3, 1:days]/size.v[3], col="red")
lines(1:days, x2[4, 3, 1:days]/size.v[4], col="green")
lines(1:days, x2[5, 3, 1:days]/size.v[5], col="orange")
lines(1:days, x2[6, 3, 1:days]/size.v[6], col="magenta")
}
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
days <- dim(x1)[4] - 1
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
path <- "H:/Scratch/GAMAout/roc31v/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
str(x3)
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
path <- "H:/Scratch/GAMAout/roc31v/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
library(lubridate)
library(doParallel)
library(dplyr)
library(data.table)
library(reshape2)
library(tidyr)
### (2) User-set parameters ###################################################
# Edit the code in this section to specify country and scenario.              #
# Update 2019.12.20 - include option to pseudo-automate. If set to true, the  #
# program will find the first country/scenario combination that has not yet   #
# been completed and will run it, from the scenario_tracker.csv file. If set  #
# to false, manually enter the country, program option, and region type.      #
# Update 2020.05.20 - for COVID, remove automation                            #
begin <- Sys.time()
start <- as.Date("1951-01-01") # Use 1/1/1951 to give 50 years burn-in
end <- as.Date("2100-12-31")
PSA <- TRUE
seed <- 4567 # Seed for random sto, use same for all scenarios
nSims <- 200  # Update: 100 takes around 12 minutes if using 4 cores.
use.tensims <- FALSE # If desired, output results from 10 sims for debugging
# Directory containing inputs from https://montagu.vaccineimpact.org/
input.dir<-"G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Data/GAVI inputs/202005gavi_v3"
# Directory for simulation outputs
output.dir <- "G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Analysis/Simulation results"
# Directory containing R scripts
script.dir <- "C:/Users/O992928/Documents/GAVI MenA predictions/R_programming/COVID"
mycountry <- "NGA"
myregion <- "hyper"  #"hyper" or "not_hyper"
vacc_program <- "scenario1"
# Set stochastic parameter
phi<-0.2
# (A) Import scripts
if (dir.exists(script.dir)) {
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
msg<(paste0("MenA_paramcheck.R not found in ", script.dir))
stop(msg)
}
} else {
script.dir<- getSrcDirectory(function(dummy) {dummy})
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
print(paste0("MenA_paramCheck.R not found in ", script.dir))
stop("This script requires 6 other scripts; please put in same directory as this one or specify script directory.")
}
setwd(script.dir)
source("MenA_paramCheck_COVID.R")
source("ModelInputUtilities_COVID.R")
source("MenA_OneSim.R")
source("MenA_helper_functions.R")
source("MenA_summarization_functions.R")
source("MenA_calibration_plots.R")
# (B) Check parameters set above
setparams<-as.list(c(mycountry, as.character(start), as.character(end), myregion, PSA, vacc_program, phi, seed, nSims, input.dir, output.dir))
names(setparams)<-c("mycountry", "start", "end", "myregion", "PSA", "vacc_program", "phi", "seed", "nSims", "input.dir", "output.dir")
if (CheckSetParameters(setparams)==FALSE) {
stop(spmessage)
} else {
if (length(spmessage)>1) { print(spmessage) }
}
# (C) Import country-specific parameters
myparams.full <- GetDemographicParameters(path=input.dir,  mycountry=mycountry, start=start, end=end)
if (CheckDemogParameters(myparams.full)==FALSE) {
stop(dpmessage)
} else {
if (length(dpmessage)>1) { print(dpmessage) }
}
# (D) Import vaccination program details
if (vacc_program!="none") {
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, sub.scenario=vacc_subprogram, directory=input.dir)
if (is.data.frame(myvacc)==FALSE) { stop(vaccmsg)}  #check for output
nodoses<-as.vector(myvacc[is.na(myvacc$DosesCampaign) | myvacc$DosesCampaign==0,"year"])
}
str(myvacc)
View(myvacc)
str(nodoses)
# (E) Country-specific life expectancy
my.lifex <- GetLifeExp(path=input.dir, mycountry.s=mycountry)
# (F) Read in parameters calculated in ABC, or a row of parameters to be used by ABC.
paramfixed <- GetModelParams(path=script.dir, region.val=myregion)
# (G) Initialize full population.
startSize <- myparams.full[myparams.full$year==year(start)-1, "totalpop"]
initpop.full <- InitializePopulation(scriptdir=script.dir, inputdir=input.dir, start=start, end=end, country=mycountry, region=myregion, startSize=startSize)
#check for errors
if (!(is.numeric(initpop.full))) {
if (disterr!="") { print(disterr) }
if (dxerr!="") { print(dxerr) }
stop(initmsg)
}
# (H) Scale down the full population to the modeled population
# This means changing both the starting population size and
# the annual number of births.
pct.modeled <- GetModelPct(path=input.dir, mycountry.s=mycountry)
initpop <- initpop.full
initpop[,,1] <- initpop[,,1] * pct.modeled
myparams <- myparams.full
myparams$births <- myparams$births * pct.modeled
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
# Plot percent of each sub-population infected
for (m in 1:dim(x1)[1]){
x2 <- x1[m,,,]
size.v  <- apply(X=x2[, 1:3, 2], MARGIN=1, FUN=sum)
# Proportion infectives in each age group
plot(1:days, x2[1, 3, 1:days]/size.v[1], type="l", col="black", ylim=c(0, 1),
main=paste(m, "  ", round(1 - sum(x2[,1,days])/sum(x2[,1,2]), 3)))
lines(1:days, x2[2, 3, 1:days]/size.v[2], col="blue")
lines(1:days, x2[3, 3, 1:days]/size.v[3], col="red")
lines(1:days, x2[4, 3, 1:days]/size.v[4], col="green")
lines(1:days, x2[5, 3, 1:days]/size.v[5], col="orange")
lines(1:days, x2[6, 3, 1:days]/size.v[6], col="magenta")
}
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
#1 - (sum(x3[,1,days-1])/sum(x3[,1,2]))
### Plot combined incidence
plot(1:days, x3[1, 3, 1:days]/x3[1,1,2], type="l", col="black", ylim=c(0, 1),
main = "Full population")
lines(1:days, x3[2, 3, 1:days]/x3[2,1,2], col="blue")
lines(1:days, x3[3, 3, 1:days]/x3[3,1,2], col="red")
lines(1:days, x3[4, 3, 1:days]/x3[4,1,2], col="green")
lines(1:days, x3[5, 3, 1:days]/x3[5,1,2], col="orange")
lines(1:days, x3[6, 3, 1:days]/x3[6,1,2], col="magenta")
# Total percent infected by end of sim
1 - sum(x3[,1,days])/sum(x3[,1,2])
# Plot percent of each sub-population infected
for (m in 1:dim(x1)[1]){
x2 <- x1[m,,,]
size.v  <- apply(X=x2[, 1:3, 2], MARGIN=1, FUN=sum)
# Proportion infectives in each age group
plot(1:days, x2[1, 3, 1:days]/size.v[1], type="l", col="black", ylim=c(0, 1),
main=paste(m, "  ", round(1 - sum(x2[,1,days])/sum(x2[,1,2]), 3)))
lines(1:days, x2[2, 3, 1:days]/size.v[2], col="blue")
lines(1:days, x2[3, 3, 1:days]/size.v[3], col="red")
lines(1:days, x2[4, 3, 1:days]/size.v[4], col="green")
lines(1:days, x2[5, 3, 1:days]/size.v[5], col="orange")
lines(1:days, x2[6, 3, 1:days]/size.v[6], col="magenta")
}
path <- "H:/Scratch/GAMAout/MPE0KG/"
x1 <- fx.read.GAMA(dir=path)
# Combine across iterations for summary plots
x3 <- apply(X=x1, MARGIN=c(2,3,4), FUN=sum)
source('C:/Users/O992928/Documents/Gavi MenA predictions/R_Programming/COVID/MenA_OneSim_COVID.R')
onerun <- MenASimulation(startdt=start, enddt=end, fp=paramfixed[4,], initpop=initpop.full, vacc_program=vacc_program,
countryparams=myparams.full, region=myregion, country=mycountry, inputdir=input.dir)
cohortSize <- getCohortSize(onerun)
totalPop <- cohortSize %>%
group_by(year) %>% summarize(tot=sum(cohortsize))
str(onerun)
str(totalPop)
length(is.na(totalPot))
length(is.na(totalPop))
totalPop[is.na(totalPop),]
totalPop[is.na(totalPop$year),]
totalPop[is.na(totalPop$tot),]
head(totalPop)
tail(totalPop)
str(cohortSize)
str(myvacc)
vlookup <- myvacc
cDoses <- vlookup[vlookup$year==year(mydate) & vlookup$activity_type=="campaign","DosesCampaign"]
mydate <- Sys.Date()
cDoses <- vlookup[vlookup$year==year(mydate) & vlookup$activity_type=="campaign","DosesCampaign"]
cDoses
View(myvacc)
source('~/.active-rstudio-document')
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, sub.scenario=vacc_subprogram, directory=input.dir)
filename
str(dfvacc)
str(ctryvacc)
GetVaccScenario<-function(mycountry, scenario, sub.scenario, directory) { #sub.scenario allows for selection between bestcase and default vaccination scenario files
vaccmsg<<-""
setwd(directory)
sub.scenario <- "NA"
filename <- GetFilename(directory, scenario)
if (is.character(filename)==FALSE) { stop(mymsg) }
dfvacc<-read.csv(filename, stringsAsFactors = FALSE)
if (IsCountryAndColAvailable(country_code=mycountry,mydf=dfvacc, forVacc=1)==FALSE) { stop(countrymsg) }
#target and year validated above.  Do we need AgeLimCampaign? No its not used.
if (scenario=="routine" || scenario=="both") {
if (!(DemogNumVarExists("coverage", dfvacc))) {
vaccmsg<<-"coverage variable missing from vaccination file"
return(FALSE)
}
ctryvacc<-dfvacc[dfvacc$country_code==mycountry, c("country_code", "year", "activity_type", "target" , "coverage", "age_first", "age_last")]
colnames(ctryvacc)[colnames(ctryvacc)=="coverage"] <-"CoverRoutine"
##target has "<NA>" where activity type = routine, hosing conversion
#still getting coercion warning
#getting this even though not strictly required by routine option
ctryvacc$DosesCampaign<-destring(ctryvacc$target)
newdf<-subset(ctryvacc, select=-c(target))
}
# (D) Import vaccination program details
if (vacc_program!="none") {
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, sub.scenario=vacc_subprogram, directory=input.dir)
if (is.data.frame(myvacc)==FALSE) { stop(vaccmsg)}  #check for output
nodoses<-as.vector(myvacc[is.na(myvacc$DosesCampaign) | myvacc$DosesCampaign==0,"year"])
}
str(myvacc)
View(myvacc)
vlookup <- myvacc
cDoses <- vlookup[vlookup$year==year(mydate) & vlookup$activity_type=="campaign","DosesCampaign"]
cDoses
campaign.df <- vlookup[vlookup$year==year(mydate) & vlookup$activity_type=="campaign",
c("age_first", "age_last", "DosesCampaign")]
x <- campaign.df$age_first==100
x
x <- campaign.df[campaign.df$age_first==100,]
x
dim(x)
begin <- Sys.time()
start <- as.Date("1951-01-01") # Use 1/1/1951 to give 50 years burn-in
end <- as.Date("2100-12-31")
PSA <- TRUE
seed <- 4567 # Seed for random sto, use same for all scenarios
nSims <- 200  # Update: 100 takes around 12 minutes if using 4 cores.
use.tensims <- FALSE # If desired, output results from 10 sims for debugging
# Directory containing inputs from https://montagu.vaccineimpact.org/
input.dir<-"G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Data/GAVI inputs/202005gavi_v3"
# Directory for simulation outputs
output.dir <- "G:/CTRHS/Modeling_Infections/GAVI MenA predictions/Analysis/Simulation results"
# Directory containing R scripts
script.dir <- "C:/Users/O992928/Documents/GAVI MenA predictions/R_programming/COVID"
mycountry <- "NGA"
myregion <- "hyper"  #"hyper" or "not_hyper"
vacc_program <- "scenario2" # scenario number (1-9)
### (3) Import and format data/functions ######################################
# Import scripts used in the simulations, country-specific parameters, and    #
# vaccination program details.                                                #
# Set stochastic parameter
phi<-0.2
# (A) Import scripts
if (dir.exists(script.dir)) {
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
msg<(paste0("MenA_paramcheck.R not found in ", script.dir))
stop(msg)
}
} else {
script.dir<- getSrcDirectory(function(dummy) {dummy})
if (file.exists(paste0(script.dir, "/","MenA_paramCheck.R"))==FALSE) {
print(paste0("MenA_paramCheck.R not found in ", script.dir))
stop("This script requires 6 other scripts; please put in same directory as this one or specify script directory.")
}
setwd(script.dir)
source("MenA_paramCheck_COVID.R")
source("ModelInputUtilities_COVID.R")
source("MenA_OneSim_COVID.R")
source("MenA_helper_functions_COVID.R")
source("MenA_summarization_functions.R")
source("MenA_calibration_plots.R")
# (B) Check parameters set above
setparams<-as.list(c(mycountry, as.character(start), as.character(end), myregion, PSA, vacc_program, phi, seed, nSims, input.dir, output.dir))
names(setparams)<-c("mycountry", "start", "end", "myregion", "PSA", "vacc_program", "phi", "seed", "nSims", "input.dir", "output.dir")
if (CheckSetParameters(setparams)==FALSE) {
stop(spmessage)
} else {
if (length(spmessage)>1) { print(spmessage) }
}
# (C) Import country-specific parameters
myparams.full <- GetDemographicParameters(path=input.dir,  mycountry=mycountry, start=start, end=end)
if (CheckDemogParameters(myparams.full)==FALSE) {
stop(dpmessage)
} else {
if (length(dpmessage)>1) { print(dpmessage) }
}
# (D) Import vaccination program details
if (vacc_program!="none") {
myvacc<-GetVaccScenario(mycountry=mycountry, scenario=vacc_program, sub.scenario=vacc_subprogram, directory=input.dir)
if (is.data.frame(myvacc)==FALSE) { stop(vaccmsg)}  #check for output
nodoses<-as.vector(myvacc[is.na(myvacc$DosesCampaign) | myvacc$DosesCampaign==0,"year"])
}
# (E) Country-specific life expectancy
my.lifex <- GetLifeExp(path=input.dir, mycountry.s=mycountry)
# (F) Read in parameters calculated in ABC, or a row of parameters to be used by ABC.
paramfixed <- GetModelParams(path=script.dir, region.val=myregion)
# (G) Initialize full population.
startSize <- myparams.full[myparams.full$year==year(start)-1, "totalpop"]
initpop.full <- InitializePopulation(scriptdir=script.dir, inputdir=input.dir, start=start, end=end, country=mycountry, region=myregion, startSize=startSize)
#check for errors
if (!(is.numeric(initpop.full))) {
if (disterr!="") { print(disterr) }
if (dxerr!="") { print(dxerr) }
stop(initmsg)
}
# (H) Scale down the full population to the modeled population
# This means changing both the starting population size and
# the annual number of births.
pct.modeled <- GetModelPct(path=input.dir, mycountry.s=mycountry)
initpop <- initpop.full
initpop[,,1] <- initpop[,,1] * pct.modeled
myparams <- myparams.full
myparams$births <- myparams$births * pct.modeled
### (4) Run simulations #######################################################
# Set up random seed vector and use parallel processing to run simulations.   #
summarizeme <- 1
# Set the random number seed based on seed, then create a vector of random number seeds (consistent within seed values)
set.seed(seed, kind = NULL, normal.kind = NULL)
seed.vec <- unique(floor(runif(nSims*2, 0, 1000000)))[1:nSims]
# Begin simulations
cl <- makeCluster(4)  #scale this upwards if you're on a workstation with >16gb memory
registerDoParallel(cl)
my_data <- foreach(n=1:nSims, .verbose=TRUE, .packages = c("lubridate", "dplyr", "data.table", "reshape2")) %dopar% {
set.seed(seed.vec[n])
paramfixed.row <- paramfixed[n,]
finalpop<-MenASimulation(startdt=start, enddt=end, fp=paramfixed.row, initpop=initpop, vacc_program=vacc_program,
countryparams=myparams, region=myregion, country=mycountry, inputdir=input.dir)
if (summarizeme > 0) {
# Using PSA option for CFR
cfr <- as.numeric(paramfixed.row[, c("cfr1", "cfr2", "cfr3", "cfr4", "cfr5", "cfr6")])
summarizeOneSim(finalpop, n, cfr)
} #end of conditional summarization
} #end of foreach loop
stopCluster(cl)
source('C:/Users/O992928/Documents/Gavi MenA predictions/R_Programming/COVID/MenA_helper_functions_COVID.R')
q()
